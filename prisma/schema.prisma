

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id            String       @id 
  username      String      @unique
  displayName   String 
  email         String?      @unique
  passwordHash  String?
  googleId      String?
  avatarUrl     String?
  bio           String?
  sessions      Session[]
  posts         Post[]
  followers     Follow[] @relation("Followers")
  following     Follow[] @relation("Following")
  likes         Like[]
  bookmarks      Bookmark[]

  created_at   DateTime  @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      User     @relation( fields: [userId] , references: [id] , onDelete:  Cascade)

  @@map("sessions")
}

model Follow {

  followerId   String
  follower      User     @relation("Following", fields: [followerId] , references: [id] , onDelete:  Cascade)
  followingId   String
  following     User     @relation("Followers", fields: [followingId] , references: [id] , onDelete:  Cascade)
  
  @@unique([followerId , followingId])
  @@map("follows")
}

model Post {
  id             String       @id  @default(cuid())
  content        String 
  userId         String
  user           User         @relation(fields: [userId] , references: [id] , onDelete:  Cascade)
  createdAt      DateTime    @default(now())

  attachment     Media[]
  likes          Like[]
  bookmarks      Bookmark[]

  @@map("posts")

}

model Media {

  id             String       @id  @default(cuid())
  postId         String?
  post           Post?         @relation(fields: [postId] , references: [id] , onDelete:  SetNull)
  type           MediaType
  url            String

  createdAt      DateTime @default(now())

  @@map("post_media")

}

enum MediaType {
  IMAGE
  VIDEO

}


model Like {

  userId   String
  user      User     @relation(fields: [userId] , references: [id] , onDelete:  Cascade)
  postId   String
  post     Post     @relation(fields: [postId] , references: [id] , onDelete:  Cascade)
  
  @@unique([userId , postId])
  @@map("likes")
}

model Bookmark {

  id             String       @id  @default(cuid())
  userId   String
  user      User     @relation(fields: [userId] , references: [id] , onDelete:  Cascade)
  postId   String
  post     Post     @relation(fields: [postId] , references: [id] , onDelete:  Cascade)
  createdAt      DateTime @default(now())
  
  @@unique([userId , postId])
  @@map("bookmarks")
}